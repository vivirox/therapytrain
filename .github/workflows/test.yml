name: CI/CD Pipeline

# Specify when this workflow runs
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Define global permissions at workflow level
permissions: write-all

# Define environment variables
env:
  NODE_VERSION: '22.x'
  PNPM_VERSION: '10.x'
  # Remove these from env and only use in steps where needed
  # VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  # VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  # VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Install Rust for Circom
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # Add system dependencies for Sharp and ZK tools
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libvips-dev

          # Install Circom
          git clone https://github.com/iden3/circom.git
          cd circom
          cargo build --release
          cargo install --path circom
          cd ..

          # Install Snarkjs globally
          npm install -g snarkjs

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      # Add caching
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "dir=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Install all dependencies including dev dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Create test environment with all required variables
      - name: Create test env file
        run: |
          cat > .env.test << EOF
          UPSTASH_REDIS_REST_URL=http://test-redis-url
          UPSTASH_REDIS_REST_TOKEN=test-token
          NEXT_PUBLIC_SUPABASE_URL=http://test-supabase-url
          NEXT_PUBLIC_SUPABASE_ANON_KEY=test-anon-key
          SUPABASE_SERVICE_ROLE_KEY=test-service-role-key
          NEXT_PUBLIC_SITE_URL=http://localhost:3000
          RESEND_API_KEY=test-resend-key
          OPENAI_API_KEY=test-openai-key
          SENTRY_DSN=test-sentry-dsn
          NODE_ENV=test
          EOF

      # Set up ZK environment
      - name: Setup ZK environment
        run: pnpm setup:zk

      # Run type checking before tests
      - name: Type check
        run: pnpm type-check

      # Run tests in groups to better identify failures
      - name: Run unit tests
        run: pnpm test "src/**/*.test.{ts,tsx}" --exclude "src/test/zk/**"

      - name: Run ZK tests
        run: pnpm test:zk

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/

      - name: Check coverage thresholds
        run: |
          COVERAGE_FILE="./coverage/coverage-summary.json"
          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "Coverage file not found!"
            exit 1
          fi

          # Function to check coverage against threshold
          check_coverage() {
            local type=$1
            local threshold=$2
            local actual=$(jq ".$type.pct" $COVERAGE_FILE)
            
            if (( $(echo "$actual < $threshold" | bc -l) )); then
              echo "$type coverage ($actual%) is below threshold ($threshold%)"
              return 1
            fi
            return 0
          }

          # Check each coverage type
          check_coverage "lines" 70 && \
          check_coverage "functions" 70 && \
          check_coverage "statements" 70 && \
          check_coverage "branches" 70

      - name: Generate test report
        if: always() # Run even if tests fail
        uses: dorny/test-reporter@v1
        with:
          name: Vitest Tests
          path: coverage/junit.xml
          reporter: jest-junit
          fail-on-error: false
