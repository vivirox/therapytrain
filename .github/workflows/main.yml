name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  NEXT_PUBLIC_SUPABASE_URL: ${{ vars.NEXT_PUBLIC_SUPABASE_URL || 'http://127.0.0.1:54321' }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ vars.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-anon-key' }}
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY || 'test-resend-key' }}
  EMAIL_FROM: ${{ secrets.EMAIL_FROM || 'test@example.com' }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'test-anthropic-key' }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-openai-key' }}
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'test-google-key' }}

jobs:
  setup-env:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create .env.test file
        run: |
          cat > .env.test << EOL
          # Test Environment Configuration
          NODE_ENV=test

          # Supabase (Mock values for testing)
          NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
          SUPABASE_SERVICE_KEY=test-service-key

          # Redis (Mock values for testing)
          UPSTASH_REDIS_REST_URL=http://localhost:6379
          UPSTASH_REDIS_REST_TOKEN=test-redis-token

          # Email (Mock settings for testing)
          RESEND_API_KEY=${RESEND_API_KEY}
          EMAIL_FROM=${EMAIL_FROM}

          # AI Services (Mock keys for testing)
          ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
          OPENAI_API_KEY=${OPENAI_API_KEY}
          AZURE_OPENAI_API_KEY=test-azure-openai-key
          AZURE_OPENAI_MODEL_DEPLOYMENT=test-deployment
          AZURE_OPENAI_API_VERSION=2023-12-01-preview
          AZURE_OPENAI_API_ENDPOINT=http://localhost:8080

          # Security (Test values)
          JWT_SECRET=test-jwt-secret
          ENCRYPTION_KEY=test-encryption-key-must-be-32-chars-12

          # ZK System (Disabled for tests)
          ZK_ENABLED=false
          ZK_PROVING_KEY_PATH=./test/keys/proving_key.json
          ZK_VERIFICATION_KEY_PATH=./test/keys/verification_key.json

          # Testing Flags
          SKIP_API_TESTS=true
          USE_MOCKS=true
          TEST_USER_EMAIL=test@example.com
          TEST_USER_PASSWORD=test-password

          # Analytics (Disabled for tests)
          NEXT_PUBLIC_ANALYTICS_ENABLED=false
          EOL

      - name: Check env files
        run: |
          ls -la
          echo "Current directory: $(pwd)"
          find . -name ".env.test" -o -name ".env.example"

      - name: Create local env files
        run: |
          cat > env-test.txt << EOL
          # Test Environment Configuration for CI
          NODE_ENV=test
          NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
          EOL

          cat > env-example.txt << EOL
          # Example Configuration for CI
          NODE_ENV=production
          NEXT_PUBLIC_SUPABASE_URL=your-url
          NEXT_PUBLIC_SUPABASE_ANON_KEY=your-key
          EOL

          ls -la
          cat env-test.txt

      - name: Upload env files
        uses: actions/upload-artifact@v3
        with:
          name: env-files
          path: |
            env-test.txt
            env-example.txt

  js-tests:
    runs-on: ubuntu-latest
    needs: setup-env
    steps:
      - uses: actions/checkout@v4

      - name: Download env files
        uses: actions/download-artifact@v3
        with:
          name: env-files

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Ensure supabase binary directory exists
        run: mkdir -p ./node_modules/.pnpm/supabase@2.12.1/node_modules/supabase/bin

      - name: Create a dummy supabase binary file
        run: |
          if [ ! -f "./node_modules/.pnpm/supabase@2.12.1/node_modules/supabase/bin/supabase" ]; then
            echo "echo 'Dummy supabase binary'" > ./node_modules/.pnpm/supabase@2.12.1/node_modules/supabase/bin/supabase
            chmod +x ./node_modules/.pnpm/supabase@2.12.1/node_modules/supabase/bin/supabase
          fi
        shell: bash

      - name: Set up MP-SPDZ environment
        run: |
          # Create minimal MP-SPDZ directories if not already present
          mkdir -p MP-SPDZ/Programs
          touch MP-SPDZ/Programs/.gitkeep
        shell: bash

      - name: Type check
        run: pnpm run type-check

      - name: Run ESLint
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test:ci
        env:
          NODE_ENV: test
          DOTENV_CONFIG_PATH: .env.test

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  python-tests:
    runs-on: ubuntu-22.04
    needs: setup-env
    steps:
      - uses: actions/checkout@v4

      - name: Download env files
        uses: actions/download-artifact@v3
        with:
          name: env-files

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install chromium
        if: hashFiles('requirements.txt') != ''

      - name: Run tests
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          if [ -d "tests" ]; then
            PYTHONPATH=. python -m unittest discover tests/
          else
            echo "No Python tests directory found, skipping"
          fi

  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    needs: setup-env
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0
          cli_config_credentials_token: ${{ github.token }}

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init -backend=false

      - name: Terraform Format
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform
          format: sarif
          additional_args: --out tfsec.sarif

      - name: Upload tfsec scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec.sarif

      - name: Run checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terraform
          framework: terraform
          soft_fail: true
          download_external_modules: true
          log_level: WARNING
          quiet: true
          skip_path: terraform/examples
          output_format: sarif

      - name: Upload checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [js-tests, python-tests, terraform-validation]
    if: false # Disabling E2E tests temporarily until environment is fully configured
    steps:
      - uses: actions/checkout@v4

      - name: Download env files
        uses: actions/download-artifact@v3
        with:
          name: env-files

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: pnpm add -D @playwright/test

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: test
          DOTENV_CONFIG_PATH: .env.test

      - name: Run Playwright tests
        run: pnpm test:e2e
        env:
          NODE_ENV: test
          DOTENV_CONFIG_PATH: .env.test

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy-staging:
    needs: [js-tests, python-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment:
      name: Preview
      url: ${{ steps.deploy-preview.outputs.preview-url }}
    steps:
      - uses: actions/checkout@v4

      - id: deploy-preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-comment: true
          alias-domains: |
            staging-gradiant.vercel.app

  deploy-production:
    needs: [js-tests, python-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: Production
    steps:
      - uses: actions/checkout@v4

      - id: deploy-production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: --prod
          github-comment: true
